if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

if &term=="xterm"
     set t_Co=8
     set t_Sb=[4%dm
     set t_Sf=[3%dm
endif

if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
    set fileencodings=utf-8,latin1
endif

set bs=indent,eol,start      " allow backspacing over everything in insert mode
"set backup     " keep a backup file
set viminfo='20,\"50 " read/write a .viminfo file, don't store more
                    " than 50 lines of registers

" Only do this part when compiled with support for autocommands
if has("autocmd")
    augroup redhat
    " In text files, always limit the width of text to 78 characters
autocmd BufRead *.txt set tw=78
" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
            \ if line("'\"") > 0 && line ("'\"") <= line("$") |
            \   exe "normal! g'\"" |
            \ endif
    augroup END
endi



"--------------------------------------------------------
"-------------------vim setting -------------------------
"--------------------------------------------------------
"
" Global Settings: {{{
" call pathogen#infect()              " use pathogen to manage plugins
syntax on                           " highlight syntax
filetype plugin indent on           " auto detect file type

set nocompatible                    " out of Vi compatible mode,Use Vim defaults (much better!)
set number                          " show line number
set numberwidth=3                   " minimal culumns for line numbers
set textwidth=0                     " do not wrap words (insert)
set nowrap                          " do not wrap words (view)
set showcmd                         " show (partial) command in status line
set ruler                           " show the cursor position all the time
set wildmenu                        " enhanced command completion
set wildmode=list:longest,full      " command completion mode
set laststatus=2                    " always show the status line
set mouse=a                         " use mouse in all mode
set foldenable                      " fold lines
"set fdm=marker
set fdm=indent
"set fdm=manual
"set foldmethod=marker               " fold as marker 
set noerrorbells                    " do not use error bell
set novisualbell                    " do not use visual bell
set t_vb=                           " do not use terminal bell

set wildignore=.svn,.git,*.swp,*.bak,*~,*.o,*.a
set autowrite                       " auto save before commands like :next and :make
set hidden                          " enable multiple modified buffers
set history=100                     " record recent used command history
set autoread                        " auto read file that has been changed on disk
set backspace=indent,eol,start      " backspace can delete everything
set completeopt=menuone,longest     " complete options (insert)
set pumheight=10                    " complete popup height
set scrolloff=5                     " minimal number of screen lines to keep beyond the cursor
set autoindent                      " automatically indent new line
set cinoptions=:0,l1,g0,t0,(0,(s    " C kind language indent options

set tabstop=4                       " number of spaces in a tab
set softtabstop=4                   " insert and delete space of <tab>
set shiftwidth=4                    " number of spaces for indent
"set expandtab                       " expand tabs into spaces
set incsearch                       " incremental search
set hlsearch                        " highlight search match
set ignorecase                      " do case insensitive matching
set smartcase                       " do not ignore if search pattern has CAPS
set nobackup                        " do not create backup file
set noswapfile                      " do not create swap file
set backupcopy=yes                  " overwrite the original file

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=gb2312,utf-8,gbk
set fileformat=unix
set background=dark
set cindent
set smartindent shiftwidth=4     "±ÈautoindentÉÔÖÇÄÜµÄ×Ô¶¯Ëõ½ø

set magic                        "ÉèÖÃÄ§ÊõÆ¥Åä¿ØÖÆ£¬¿ÉÒÔÍ¨¹ı:h magic²é¿´¸üÏêÏ¸µÄ°ïÖúĞÅÏ¢
"set showmatch                   "²åÈëÓÒÀ¨ºÅÊ±»á¶ÌÔİµØÌø×ªµ½Æ¥ÅäµÄ×óÀ¨ºÅ


" gui settings
if has("gui_running")
    set guioptions-=T " no toolbar
    set guioptions-=r " no right-hand scrollbar
    set guioptions-=R " no right-hand vertically scrollbar
    set guioptions-=l " no left-hand scrollbar
    set guioptions-=L " no left-hand vertically scrollbar
    autocmd GUIEnter * simalt ~x " window width and height
    source $VIMRUNTIME/delmenu.vim " the original menubar has an error on win32, so
    source $VIMRUNTIME/menu.vim    " use this menubar
    language messages zh_CN.utf-8 " use chinese messages if has
endif


"setfoldmethod=syntax
"setfoldlevel=100
"========================================================
" set cursorline and LinNr color
"========================================================
set cursorline
" hi LineNr
"hi LineNr term=underline ctermfg=green guibg=grey10 guifg=#509050 gui=bold

"========================================================
" colorscheme style
"========================================================
"colorscheme vividchalk
"colorscheme evening
"colorscheme bensday
colorscheme elflord
"}}}


"--------------------------------------------------------
"---------------ShortCut Key Bindings--------------------
"--------------------------------------------------------
" Key Bindings: {{{
let mapleader = ","
let maplocalleader = "\\"

" map : -> <space>
map <Space> :

" Don't use Ex mode, use Q for formatting
map Q gq

"make Y consistent with C and D
nnoremap Y y$

" toggle highlight trailing whitespace
nmap <silent> <leader>l :set nolist!<CR>


"========================================================
" µ÷Õû´°¿Ú´óĞ¡
" NOTICE:must have no blank after the <CR>
"========================================================
map <silent> <C-Up> :winc+ <CR>
map <silent> <C-Down> :winc- <CR>
map <silent> <C-Left> :winc> <CR>
map <silent> <C-Right> :winc< <CR>

"========================================================
" short-cut key move between windows
"========================================================
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

"========================================================
" Ctrol-E to switch between 2 last buffers
"========================================================
nmap <C-E> :b#<CR>

"========================================================
" ,e to fast finding files. just type beginning of a name and hit TAB
"========================================================
nmap <leader>e :e **/

"========================================================
" Make shift-insert work like in Xterm
"========================================================
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

"========================================================
" Ctrl-N to disable search match highlight
"========================================================
nmap <silent> <C-N> :silent noh<CR>

"========================================================
" center display after searching
"========================================================
"nnoremap n   nzz
"nnoremap N   Nzz
"nnoremap *   *zz
"nnoremap #   #zz
"nnoremap g*  g*zz
"nnoremap g#  g#z
"}}}


"--------------------------------------------------------
"-------------------plugin setting ----------------------
"--------------------------------------------------------
" Plugin Settings: {{{
if has("win32") " win32 system
    let $HOME  = $VIM
    let $VIMFILES = $HOME . "/vimfiles"
else " unix
    let $HOME  = $HOME
    let $VIMFILES = $HOME . "/.vim"
endif

"--------------------------------------------------------
"-------------------using plugin-------------------------
"--------------------------------------------------------

"========================================================
" Tlist plugin
"========================================================
let g:Tlist_WinWidth = 25
let g:Tlist_Auto_Update = 1
let g:Tlist_Enable_Fold_Column = 0
let g:Tlist_Auto_Highlight_Tag = 1
let g:Tlist_GainFocus_On_ToggleOpen = 1

let Tlist_Ctags_Cmd='ctags' "ÒòÎªÎÒÃÇ·ÅÔÚ»·¾³±äÁ¿Àï£¬ËùÒÔ¿ÉÒÔÖ±½ÓÖ´ĞĞ
let Tlist_Use_Right_Window=1 "ÈÃ´°¿ÚÏÔÊ¾ÔÚÓÒ±ß£¬0µÄ»°¾ÍÊÇÏÔÊ¾ÔÚ×ó±ß
let Tlist_Show_One_File=0 "ÈÃtaglist¿ÉÒÔÍ¬Ê±Õ¹Ê¾¶à¸öÎÄ¼şµÄº¯ÊıÁĞ±í£¬Èç¹ûÏëÖ»ÓĞ1¸ö£¬ÉèÖÃÎª1
let Tlist_File_Fold_Auto_Close=1 "·Çµ±Ç°ÎÄ¼ş£¬º¯ÊıÁĞ±íÕÛµşÒş²Ø
let Tlist_Exit_OnlyWindow=1 "µ±taglistÊÇ×îºóÒ»¸ö·Ö¸î´°¿ÚÊ±£¬×Ô¶¯ÍÆ³övim
let Tlist_Process_File_Always=0 "ÊÇ·ñÒ»Ö±´¦Àítags.1:´¦Àí;0:²»´¦Àí¡£²»ÊÇÒ»Ö±ÊµÊ±¸üĞÂtags£¬ÒòÎªÃ»ÓĞ±ØÒª
let Tlist_Inc_Winwidth=0
let Tlist_OnlyWindow=1
let Tlist_Sort_Type='name'
let Tlist_Show_Menu=1

let Tlist_Max_Submenu_Items=10
let Tlist_Max_Tag_length=20
let Tlist_Use_SingleClick=0
let Tlist_Auto_Open=0
let Tlist_Close_On_Select=0
let Tlist_File_Fold_Auto_Close=1
let Tlist_GainFocus_On_ToggleOpen=0
let Tlist_Process_File_Always=1
let Tlist_WinHeight=10
let Tlist_WinWidth=18
let Tlist_Use_Horiz_Window=0


"========================================================
" winManagerWindow plugin
"========================================================
"let g:winManagerWindowLayout='FileExplorer|TagList'
let g:winManagerWindowLayout='FileExplorer'
let g:persistentBehaviour=0
let g:winManagerWidth=20
let g:defaultExplorer=1
nmap <silent> <leader>fir :FirstExplorerWindow<cr>
nmap <silent> <leader>bot :BottomExplorerWindow<cr>
"nmap <silent> <leader>wm :WMToggle<cr>
nmap wm :WMToggle<cr>

"========================================================
" mark.vim plugin
" <F4> == ,m
"========================================================
nmap <unique> <silent> <F4> <Plug>MarkSet


"========================================================
" Ctags plugin
"  Ctrl-]    Ìø×ªµ½¹â±êËùÔÚ·ûºÅµÄ¶¨Òå¡£
"  Ctrl-t    »Øµ½ÉÏ´ÎÌø×ªÇ°µÄÎ»ÖÃ¡£
"========================================================
map <F11> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>

"========================================================
" Cscope plugin
"========================================================
nmap <F9>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <F9>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <F9>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <F9>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <F9>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <F9>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <F9>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <F9>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" Ö»ÏÔÊ¾Ò»ĞĞ
"set cscopequickfix=s-,c-,d-,i-,t-,e-

map <F12> :call Do_CsTag()<CR><CR>
nmap <C-/>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-/>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-/>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-/>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-/>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-/>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap <C-/>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
nmap <C-/>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>

function Do_CsTag()
    let dir = getcwd()
    if filereadable("tags")
        if(g:iswindows==1)
            let tagsdeleted=delete(dir."\\"."tags")
        else
            let tagsdeleted=delete("./"."tags")
        endif
        if(tagsdeleted!=0)
            echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
            return
        endif
    endif
    if has("cscope")
        silent! execute "cs kill -1"
    endif
    if filereadable("cscope.files")
        if(g:iswindows==1)
            let csfilesdeleted=delete(dir."\\"."cscope.files")
        else
            let csfilesdeleted=delete("./"."cscope.files")
        endif
        if(csfilesdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
            return
        endif
    endif
    if filereadable("cscope.out")
        if(g:iswindows==1)
            let csoutdeleted=delete(dir."\\"."cscope.out")
        else
            let csoutdeleted=delete("./"."cscope.out")
        endif
        if(csoutdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
            return
        endif
    endif
    if(executable('ctags'))
        "silent! execute "!ctags -R --c-types=+p --fields=+S *"
        silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope') && has("cscope") )
        if(g:iswindows!=1)
            silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' > cscope.files"
        else
            silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs >> cscope.files"
        endif
        silent! execute "!cscope -b"
        execute "normal :"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        endif
    endif
endfunction



"========================================================
" QuickFix plugin
" to get the next location (compilation errors, grep etc)
"========================================================
"nmap <F6> :cn<cr>
"nmap <F7> :cp<cr>

"========================================================
" MiniBufExplorer plugin
"========================================================
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplModSelTarget = 1 
let g:miniBufExplMoreThanOne=0

"========================================================
" NERDTree plugin
"========================================================
let g:NERDTreeWinPos = "right"
let g:NERDTreeWinSize = 30
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeQuitOnOpen = 1
nmap <Leader>f :NERDTreeToggle<CR>
nmap <Leader>F :NERDTreeFind<CR>

let g:NERDTree_title="[NERDTree]"
"let g:winManagerWindowLayout="NERDTree|TagList"
"let g:winManagerWindowLayout="NERDTree"
function! NERDTree_Start()
    exec 'NERDTree'
endfunction

function! NERDTree_IsValid()
    return 1
endfunction

"========================================================
" NERD_commenter.vim plugin
" ctrl+h:comment/uncomment
" cm:multi-line comment
" ,c<space>    " comment <--> uncomment.
" ,cm          " ÒÔ¶Î×÷Îªµ¥Î»½øĞĞ×¢ÊÍ.
" ,cs          " ¼ò½àÃÀ¹ÛÊ½×¢ÊÍ.
" ,cy          " Same as ,cc except that the commented line(s) are
" ,c$          " ×¢ÊÍµ±Ç°¹â±êµ½ĞĞÎ´µÄÄÚÈİ.
" ,cA          " ÔÚĞĞÎ²½øĞĞÊÖ¶¯ÊäÈë×¢ÊÍÄÚÈİ.
" ,ca          " ÇĞ»»×¢ÊÍ·½Ê½(/**/ <--> //).
" ,cl          " Same cc, ²¢ÇÒ×ó¶ÔÆë.
" ,cb          " Same cc, ²¢ÇÒÁ½¶Ë¶ÔÆë.
" ,cu          " Uncomments the selected line(s).
"========================================================
let NERDShutUp=1

"========================================================
" DoxyenToolkit.vim plugin
"========================================================
map fg : Dox<cr>
let g:DoxygenToolkit_authorName="HongZhang_Mu"
let g:DoxygenToolkit_licenseTag="NetentSec Company"
let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
let g:DoxygenToolkit_briefTag_pre = "@brief\t"
let g:DoxygenToolkit_paramTag_pre = "@param\t"
let g:DoxygenToolkit_returnTag = "@return\t"
let g:DoxygenToolkit_briefTag_funcName = "no"
let g:DoxygenToolkit_maxFunctionProtoLines = 30

"========================================================
" a.vim plugin
" :A  :AS  :AV  :AT
"========================================================
nnoremap <silent> <F10> :A<CR>

"========================================================
" MiniBufExplorer plugin
"========================================================
nnoremap <silent> <F3> :Grep<CR>

"========================================================
" Visual Mark plugin
" mm
"========================================================
"nnoremap <silent> <F4> :,m<CR>

"========================================================
"  omni-completion Mark plugin
"  Ctrl+P   ÏòÇ°ÇĞ»»³ÉÔ±
"  Ctrl+N   ÏòºóÇĞ»»³ÉÔ±
"  Ctrl+E   ±íÊ¾ÍË³öÏÂÀ­´°¿Ú, ²¢ÍË»Øµ½Ô­À´Â¼ÈëµÄÎÄ×Ö
"  Ctrl+Y   ±íÊ¾ÍË³öÏÂÀ­´°¿Ú, ²¢½ÓÊÜµ±Ç°Ñ¡Ïî
"   Ctrl+X Ctrl+L    ÕûĞĞ²¹È«
"   Ctrl+X Ctrl+N   ¸ù¾İµ±Ç°ÎÄ¼şÀï¹Ø¼ü×Ö²¹È«
"   Ctrl+X Ctrl+K   ¸ù¾İ×Öµä²¹È«
"   Ctrl+X Ctrl+T   ¸ù¾İÍ¬Òå´Ê×Öµä²¹È«
"   Ctrl+X Ctrl+I   ¸ù¾İÍ·ÎÄ¼şÄÚ¹Ø¼ü×Ö²¹È«
"   Ctrl+X Ctrl+]   ¸ù¾İ±êÇ©²¹È«
"   Ctrl+X Ctrl+F   ²¹È«ÎÄ¼şÃû
"   Ctrl+X Ctrl+D   ²¹È«ºê¶¨Òå
"   Ctrl+X Ctrl+V   ²¹È«vimÃüÁî
"   Ctrl+X Ctrl+U   ÓÃ»§×Ô¶¨Òå²¹È«·½Ê½
"   Ctrl+X Ctrl+S   Æ´Ğ´½¨Òé
"========================================================


"========================================================
" sketch plugin
"========================================================
map <silent> <leader>ske :call ToggleSketch()<CR>
command -nargs=0 ToggleSketch call ToggleSketch()

"========================================================
" Calendar plugin
"========================================================
"let g:calendar_diary=
"map <silent> <leader>cal :Calendar<cr>
"map <silent> <leader>cah :CalendarH<cr>

"========================================================
" vimball plugin
" :so % 
"========================================================

"========================================================
" OmniCppComplete plugin
"========================================================
"set nocp  
"filetype plugin on

"========================================================
" ShowFunc plugin, need Exuberant Ctags
"========================================================
map <F7> <Plug>ShowFunc
map! <F7> <Plug>ShowFunc

"========================================================
" EchoFunc plugin, need Exuberant Ctags
" ctags -R --fields=+lS .
"========================================================
"let g:EchoFuncShowOnStatus = 1



"--------------------------------------------------------
"-------------------no using plugin----------------------
"--------------------------------------------------------

"========================================================
" mru
"========================================================
"let MRU_Window_Height = 10
"nmap <Leader>r :MRU<cr>

" snipMate
let g:snip_author   = "Jeffy Du"
let g:snip_mail     = "jeffy.du@163.com"
let g:snip_company  = "SIC Microelectronics CO. Ltd"

" man.vim - view man page in VIM
source $VIMRUNTIME/ftplugin/man.vim

" vimgdb.vim
if has("gdb")
	set asm=0
	let g:vimgdb_debug_file=""
	run macros/gdb_mappings.vim
endif



